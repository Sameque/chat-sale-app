-- Tabela de usuários (já criada automaticamente pelo Supabase Auth, mas podemos adicionar campos extras)
create table public.profiles (
  id uuid references auth.users(id) on delete cascade primary key,
  username text not null unique,
  created_at timestamp with time zone default now()
);

-- Tabela de mensagens
create table public.messages (
  id bigint generated by default as identity primary key,
  sender_id uuid references auth.users(id) on delete cascade,
  recipient_id uuid references auth.users(id) on delete cascade,
  content text not null,
  created_at timestamp with time zone default now(),
  read boolean default false
);

-- Habilitar Realtime na tabela messages
alter publication supabase_realtime add table messages;

-- Políticas RLS para profiles
alter table profiles enable row level security;
create policy "Allow authenticated read access to profiles" on profiles
  for select using (auth.role() = 'authenticated');
create policy "Allow authenticated insert access to profiles" on profiles
  for insert with check (auth.role() = 'authenticated');
create policy "Allow authenticated update access to profiles" on profiles
  for update using (auth.role() = 'authenticated') with check (auth.uid() = id);

-- Políticas RLS para messages
alter table messages enable row level security;
create policy "Allow authenticated read access to messages" on messages
  for select using (auth.role() = 'authenticated' and (auth.uid() = sender_id or auth.uid() = recipient_id));
create policy "Allow authenticated insert access to messages" on messages
  for insert with check (auth.role() = 'authenticated' and auth.uid() = sender_id);
create policy "Allow authenticated update access to messages" on messages
  for update using (auth.role() = 'authenticated' and auth.uid() = sender_id or auth.uid() = recipient_id)
  with check (auth.uid() = sender_id or auth.uid() = recipient_id);

create or replace function handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, username)
  values (new.id, new.raw_user_meta_data->>'username');
  return new;
end;
$$ language plpgsql security definer;

create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure handle_new_user();